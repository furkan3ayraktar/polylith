(ns polylith.clj.core.help.check
  (:require [polylith.clj.core.help.shared :as shared]
            [polylith.clj.core.util.interface.color :as color]))

(defn help-text [color-mode]
  (str "  Prints 'OK' and returns 0 if no errors was found.\n"
       "  Prints error messages if errors was found and returns the error code\n"
       "  (or 1 if internal error).\n"
       "  If any warnings are found, then they are also printed.\n"
       "\n"
       "  " (color/error color-mode "Error 101") " - Illegal dependency on namespace.\n"
       "    Triggered if a " (color/purple color-mode ":require") " statement refers to a component namespace other than " (color/interface "interface" color-mode) ".\n"
       "    Examples of valid namespaces:\n"
       "     - " (shared/component-ns "interface" color-mode) "\n"
       "     - " (shared/component-ns "interface.subns" color-mode) "\n"
       "     - " (shared/component-ns "interface.my.subns" color-mode) "\n"
       "\n"
       "  " (color/error color-mode "Error 102") " - Function or macro is defined twice.\n"
       "    Triggered if a function of macro is defined twice in the same namespace.\n"
       "\n"
       "  " (color/error color-mode "Error 103") " - Missing definitions.\n"
       "    Triggered if a " (color/green color-mode "def") ", " (color/green color-mode "defn") " or "
       (color/green color-mode "defmacro") " definition exists in one component's interface\n"
       "    but is missing in another component that uses the same interface.\n"
       "\n"
       "  " (color/error color-mode "Error 104") " - Circular dependencies.\n"
       "    Triggered if circular dependencies were detected, e.g.:\n"
       "    Component A depends on B that depends on A (A > B > A), or A > B > C > A.\n"
       "\n"
       "  " (color/error color-mode "Error 105") " - Illegal name sharing.\n"
       "    Triggered if a base has the same name as a component or interface.\n"
       "    Environments though, are allowed to share names with interfaces, components and bases.\n"
       "\n"
       "  " (color/error color-mode "Error 106") " - Multiple components that share the same interfaces in environment.\n"
       "    Triggered if an environment (development not included) contains more than one\n"
       "    component that shares the same interface.\n"
       "\n"
       "  " (color/error color-mode "Error 107") " - Missing components in environment.\n"
       "    Triggered if a component depends on an interface that is not included in the environment.\n"
       "    The solution is to add a component to the environment that implements the interface.\n"
       "\n"
       "  " (color/error color-mode "Error 108") " - Components with an interface that is implemented by more than one component\n"
       "              is not allowed for the development environment.\n"
       "    The solution is to remove the component from the development environment and define the paths \n"
       "    for each component in separate profiles.\n"
       "\n"
       "  " (color/error color-mode "Error 109") " - Missing libraries in environment.\n"
       "    Triggered if an environment doesn't contain a library that is used by one of its bricks.\n"
       "    Library usage for a brick is calculated using :ns->lib in './deps.edn' for all its namespaces.\n"
       "\n"
       "  " (color/warning color-mode "Warning 201") " - Mismatching parameter lists in function or macro.\n"
       "    Triggered if a function or macro is defined in the interface for a component but also defined\n"
       "    in the same interface for another component but with a different parameter list.\n"
       "\n"
       "  " (color/warning color-mode "Warning 202") " - Missing paths in environment.\n"
       "    Triggered if a path in an environment doesn't exist on disk.\n"
       "    The solution is to add the file or directory, or to remove the path.\n"
       "\n"
       "  " (color/warning color-mode "Warning 203") " - Path exists in both dev and profile.\n"
       "    We are not allowed to have the same path in both the development environment and a profile.\n"
       "    The solution is to remove the path from dev or the profile. \n"
       "\n"
       "  " (color/warning color-mode "Warning 204") " - Library exists in both dev and a profile.\n"
       "    We are not allowed to have libraries in both development and a profile.\n"
       "    The solution is to remove the library from dev or the profile.\n"
       "\n"
       "  " (color/warning color-mode "Warning 205") " - Reference to missing library in :ns->lib.\n"
       "    Libraries defined in :ns->lib must also be defined by the environment.\n"
       "\n"
       "  " (color/warning color-mode "Warning 206") " - Reference to missing namespace in :ns->lib.\n"
       "    Namespaces defined in :ns->lib must also exist in the environment.\n"))

(defn print-help [color-mode]
  (-> color-mode help-text println))
